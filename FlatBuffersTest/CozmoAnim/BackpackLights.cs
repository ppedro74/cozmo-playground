// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CozmoAnim
{

using global::System;
using global::FlatBuffers;

public struct BackpackLights : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb) { return GetRootAsBackpackLights(_bb, new BackpackLights()); }
  public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb, BackpackLights obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BackpackLights __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint TriggerTimeMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint DurationTimeMs { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float Left(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LeftLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLeftBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetLeftBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetLeftArray() { return __p.__vector_as_array<float>(8); }
  public float Right(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RightLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRightBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetRightBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetRightArray() { return __p.__vector_as_array<float>(10); }
  public float Front(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int FrontLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetFrontBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetFrontBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetFrontArray() { return __p.__vector_as_array<float>(12); }
  public float Middle(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int MiddleLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetMiddleBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetMiddleBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetMiddleArray() { return __p.__vector_as_array<float>(14); }
  public float Back(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int BackLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetBackBytes() { return __p.__vector_as_span<float>(16, 4); }
#else
  public ArraySegment<byte>? GetBackBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public float[] GetBackArray() { return __p.__vector_as_array<float>(16); }

  public static Offset<CozmoAnim.BackpackLights> CreateBackpackLights(FlatBufferBuilder builder,
      uint triggerTime_ms = 0,
      uint durationTime_ms = 0,
      VectorOffset LeftOffset = default(VectorOffset),
      VectorOffset RightOffset = default(VectorOffset),
      VectorOffset FrontOffset = default(VectorOffset),
      VectorOffset MiddleOffset = default(VectorOffset),
      VectorOffset BackOffset = default(VectorOffset)) {
    builder.StartTable(7);
    BackpackLights.AddBack(builder, BackOffset);
    BackpackLights.AddMiddle(builder, MiddleOffset);
    BackpackLights.AddFront(builder, FrontOffset);
    BackpackLights.AddRight(builder, RightOffset);
    BackpackLights.AddLeft(builder, LeftOffset);
    BackpackLights.AddDurationTimeMs(builder, durationTime_ms);
    BackpackLights.AddTriggerTimeMs(builder, triggerTime_ms);
    return BackpackLights.EndBackpackLights(builder);
  }

  public static void StartBackpackLights(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) { builder.AddUint(0, triggerTimeMs, 0); }
  public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) { builder.AddUint(1, durationTimeMs, 0); }
  public static void AddLeft(FlatBufferBuilder builder, VectorOffset LeftOffset) { builder.AddOffset(2, LeftOffset.Value, 0); }
  public static VectorOffset CreateLeftVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLeftVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLeftVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRight(FlatBufferBuilder builder, VectorOffset RightOffset) { builder.AddOffset(3, RightOffset.Value, 0); }
  public static VectorOffset CreateRightVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRightVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFront(FlatBufferBuilder builder, VectorOffset FrontOffset) { builder.AddOffset(4, FrontOffset.Value, 0); }
  public static VectorOffset CreateFrontVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFrontVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFrontVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMiddle(FlatBufferBuilder builder, VectorOffset MiddleOffset) { builder.AddOffset(5, MiddleOffset.Value, 0); }
  public static VectorOffset CreateMiddleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMiddleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMiddleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBack(FlatBufferBuilder builder, VectorOffset BackOffset) { builder.AddOffset(6, BackOffset.Value, 0); }
  public static VectorOffset CreateBackVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBackVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBackVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CozmoAnim.BackpackLights> EndBackpackLights(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CozmoAnim.BackpackLights>(o);
  }
};


}
