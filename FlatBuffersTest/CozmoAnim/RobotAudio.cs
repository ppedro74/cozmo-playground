// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CozmoAnim
{

using global::System;
using global::FlatBuffers;

public struct RobotAudio : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static RobotAudio GetRootAsRobotAudio(ByteBuffer _bb) { return GetRootAsRobotAudio(_bb, new RobotAudio()); }
  public static RobotAudio GetRootAsRobotAudio(ByteBuffer _bb, RobotAudio obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RobotAudio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint TriggerTimeMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long AudioEventId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AudioEventIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAudioEventIdBytes() { return __p.__vector_as_span<long>(6, 8); }
#else
  public ArraySegment<byte>? GetAudioEventIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public long[] GetAudioEventIdArray() { return __p.__vector_as_array<long>(6); }
  public float Volume { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float Probability(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ProbabilityLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetProbabilityBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetProbabilityBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetProbabilityArray() { return __p.__vector_as_array<float>(10); }
  public bool HasAlts { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<CozmoAnim.RobotAudio> CreateRobotAudio(FlatBufferBuilder builder,
      uint triggerTime_ms = 0,
      VectorOffset audioEventIdOffset = default(VectorOffset),
      float volume = 1.0f,
      VectorOffset probabilityOffset = default(VectorOffset),
      bool hasAlts = true) {
    builder.StartTable(5);
    RobotAudio.AddProbability(builder, probabilityOffset);
    RobotAudio.AddVolume(builder, volume);
    RobotAudio.AddAudioEventId(builder, audioEventIdOffset);
    RobotAudio.AddTriggerTimeMs(builder, triggerTime_ms);
    RobotAudio.AddHasAlts(builder, hasAlts);
    return RobotAudio.EndRobotAudio(builder);
  }

  public static void StartRobotAudio(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) { builder.AddUint(0, triggerTimeMs, 0); }
  public static void AddAudioEventId(FlatBufferBuilder builder, VectorOffset audioEventIdOffset) { builder.AddOffset(1, audioEventIdOffset.Value, 0); }
  public static VectorOffset CreateAudioEventIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAudioEventIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartAudioEventIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddVolume(FlatBufferBuilder builder, float volume) { builder.AddFloat(2, volume, 1.0f); }
  public static void AddProbability(FlatBufferBuilder builder, VectorOffset probabilityOffset) { builder.AddOffset(3, probabilityOffset.Value, 0); }
  public static VectorOffset CreateProbabilityVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProbabilityVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartProbabilityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHasAlts(FlatBufferBuilder builder, bool hasAlts) { builder.AddBool(4, hasAlts, true); }
  public static Offset<CozmoAnim.RobotAudio> EndRobotAudio(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // audioEventId
    return new Offset<CozmoAnim.RobotAudio>(o);
  }
};


}
