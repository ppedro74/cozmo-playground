// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CozmoAnim
{

using global::System;
using global::FlatBuffers;

public struct Keyframes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Keyframes GetRootAsKeyframes(ByteBuffer _bb) { return GetRootAsKeyframes(_bb, new Keyframes()); }
  public static Keyframes GetRootAsKeyframes(ByteBuffer _bb, Keyframes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Keyframes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CozmoAnim.LiftHeight? LiftHeightKeyFrame(int j) { int o = __p.__offset(4); return o != 0 ? (CozmoAnim.LiftHeight?)(new CozmoAnim.LiftHeight()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LiftHeightKeyFrameLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.ProceduralFace? ProceduralFaceKeyFrame(int j) { int o = __p.__offset(6); return o != 0 ? (CozmoAnim.ProceduralFace?)(new CozmoAnim.ProceduralFace()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ProceduralFaceKeyFrameLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.HeadAngle? HeadAngleKeyFrame(int j) { int o = __p.__offset(8); return o != 0 ? (CozmoAnim.HeadAngle?)(new CozmoAnim.HeadAngle()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int HeadAngleKeyFrameLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.RobotAudio? RobotAudioKeyFrame(int j) { int o = __p.__offset(10); return o != 0 ? (CozmoAnim.RobotAudio?)(new CozmoAnim.RobotAudio()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RobotAudioKeyFrameLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.BackpackLights? BackpackLightsKeyFrame(int j) { int o = __p.__offset(12); return o != 0 ? (CozmoAnim.BackpackLights?)(new CozmoAnim.BackpackLights()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BackpackLightsKeyFrameLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.FaceAnimation? FaceAnimationKeyFrame(int j) { int o = __p.__offset(14); return o != 0 ? (CozmoAnim.FaceAnimation?)(new CozmoAnim.FaceAnimation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FaceAnimationKeyFrameLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.Event? EventKeyFrame(int j) { int o = __p.__offset(16); return o != 0 ? (CozmoAnim.Event?)(new CozmoAnim.Event()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventKeyFrameLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.BodyMotion? BodyMotionKeyFrame(int j) { int o = __p.__offset(18); return o != 0 ? (CozmoAnim.BodyMotion?)(new CozmoAnim.BodyMotion()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BodyMotionKeyFrameLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.RecordHeading? RecordHeadingKeyFrame(int j) { int o = __p.__offset(20); return o != 0 ? (CozmoAnim.RecordHeading?)(new CozmoAnim.RecordHeading()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RecordHeadingKeyFrameLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CozmoAnim.TurnToRecordedHeading? TurnToRecordedHeadingKeyFrame(int j) { int o = __p.__offset(22); return o != 0 ? (CozmoAnim.TurnToRecordedHeading?)(new CozmoAnim.TurnToRecordedHeading()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TurnToRecordedHeadingKeyFrameLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CozmoAnim.Keyframes> CreateKeyframes(FlatBufferBuilder builder,
      VectorOffset LiftHeightKeyFrameOffset = default(VectorOffset),
      VectorOffset ProceduralFaceKeyFrameOffset = default(VectorOffset),
      VectorOffset HeadAngleKeyFrameOffset = default(VectorOffset),
      VectorOffset RobotAudioKeyFrameOffset = default(VectorOffset),
      VectorOffset BackpackLightsKeyFrameOffset = default(VectorOffset),
      VectorOffset FaceAnimationKeyFrameOffset = default(VectorOffset),
      VectorOffset EventKeyFrameOffset = default(VectorOffset),
      VectorOffset BodyMotionKeyFrameOffset = default(VectorOffset),
      VectorOffset RecordHeadingKeyFrameOffset = default(VectorOffset),
      VectorOffset TurnToRecordedHeadingKeyFrameOffset = default(VectorOffset)) {
    builder.StartTable(10);
    Keyframes.AddTurnToRecordedHeadingKeyFrame(builder, TurnToRecordedHeadingKeyFrameOffset);
    Keyframes.AddRecordHeadingKeyFrame(builder, RecordHeadingKeyFrameOffset);
    Keyframes.AddBodyMotionKeyFrame(builder, BodyMotionKeyFrameOffset);
    Keyframes.AddEventKeyFrame(builder, EventKeyFrameOffset);
    Keyframes.AddFaceAnimationKeyFrame(builder, FaceAnimationKeyFrameOffset);
    Keyframes.AddBackpackLightsKeyFrame(builder, BackpackLightsKeyFrameOffset);
    Keyframes.AddRobotAudioKeyFrame(builder, RobotAudioKeyFrameOffset);
    Keyframes.AddHeadAngleKeyFrame(builder, HeadAngleKeyFrameOffset);
    Keyframes.AddProceduralFaceKeyFrame(builder, ProceduralFaceKeyFrameOffset);
    Keyframes.AddLiftHeightKeyFrame(builder, LiftHeightKeyFrameOffset);
    return Keyframes.EndKeyframes(builder);
  }

  public static void StartKeyframes(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddLiftHeightKeyFrame(FlatBufferBuilder builder, VectorOffset LiftHeightKeyFrameOffset) { builder.AddOffset(0, LiftHeightKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateLiftHeightKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.LiftHeight>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLiftHeightKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.LiftHeight>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLiftHeightKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProceduralFaceKeyFrame(FlatBufferBuilder builder, VectorOffset ProceduralFaceKeyFrameOffset) { builder.AddOffset(1, ProceduralFaceKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateProceduralFaceKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.ProceduralFace>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateProceduralFaceKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.ProceduralFace>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartProceduralFaceKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHeadAngleKeyFrame(FlatBufferBuilder builder, VectorOffset HeadAngleKeyFrameOffset) { builder.AddOffset(2, HeadAngleKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateHeadAngleKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.HeadAngle>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHeadAngleKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.HeadAngle>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartHeadAngleKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRobotAudioKeyFrame(FlatBufferBuilder builder, VectorOffset RobotAudioKeyFrameOffset) { builder.AddOffset(3, RobotAudioKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateRobotAudioKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.RobotAudio>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRobotAudioKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.RobotAudio>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRobotAudioKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBackpackLightsKeyFrame(FlatBufferBuilder builder, VectorOffset BackpackLightsKeyFrameOffset) { builder.AddOffset(4, BackpackLightsKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateBackpackLightsKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.BackpackLights>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBackpackLightsKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.BackpackLights>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBackpackLightsKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFaceAnimationKeyFrame(FlatBufferBuilder builder, VectorOffset FaceAnimationKeyFrameOffset) { builder.AddOffset(5, FaceAnimationKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateFaceAnimationKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.FaceAnimation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFaceAnimationKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.FaceAnimation>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFaceAnimationKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventKeyFrame(FlatBufferBuilder builder, VectorOffset EventKeyFrameOffset) { builder.AddOffset(6, EventKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateEventKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.Event>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.Event>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBodyMotionKeyFrame(FlatBufferBuilder builder, VectorOffset BodyMotionKeyFrameOffset) { builder.AddOffset(7, BodyMotionKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateBodyMotionKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.BodyMotion>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBodyMotionKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.BodyMotion>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBodyMotionKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecordHeadingKeyFrame(FlatBufferBuilder builder, VectorOffset RecordHeadingKeyFrameOffset) { builder.AddOffset(8, RecordHeadingKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateRecordHeadingKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.RecordHeading>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRecordHeadingKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.RecordHeading>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRecordHeadingKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTurnToRecordedHeadingKeyFrame(FlatBufferBuilder builder, VectorOffset TurnToRecordedHeadingKeyFrameOffset) { builder.AddOffset(9, TurnToRecordedHeadingKeyFrameOffset.Value, 0); }
  public static VectorOffset CreateTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder builder, Offset<CozmoAnim.TurnToRecordedHeading>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTurnToRecordedHeadingKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<CozmoAnim.TurnToRecordedHeading>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CozmoAnim.Keyframes> EndKeyframes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CozmoAnim.Keyframes>(o);
  }
};


}
